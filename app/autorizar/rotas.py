from flask import render_template, redirect, request, url_for, flash
from flask_login import login_user, logout_user, login_required, current_user
from . import autorizar as bp
from .. import db
from ..modelos import Usuario, Role
from ..email import enviar_email
from .formularios import (
    formularioEntrar,
    formularioInscricao,
    formularioTrocarSenha,
    formularioPedirRedefinirSenha,
    formularioRedefinirSenha,
    formularioTrocarEmail
)
from datetime import datetime




# Atualiza o campo 'ultimo_acesso' e exige confirma√ß√£o da conta para acessar p√°ginas fora do blueprint 'autorizar'
@bp.before_app_request
def antes_do_pedido():

    # Se o usu√°rio atual tiver a conta confirmada
    if current_user.is_authenticated:

        # Atualize o campo 'ultimo_acesso' do usu√°rio
        current_user.ping()

        # Se o usu√°rio estiver conectado
        # e n√£o for um usu√°rio com a conta confirmada
        # e o URL pedido est√° fora do Blueprint de autoriza√ß√£o
        # e o arquivo pedido n√£o √© um arquivo est√°tico
        if current_user.is_authenticated and not current_user.confirmado and request.blueprint != 'autorizar' and request.endpoint != 'static':

            # Redirecione para a p√°gina de conta n√£o confirmada
            return redirect(url_for('autorizar.nao_confirmado'))



##### #   # ##### #####  ###  #####       #####  ###  ##### ##### 
#     ##  #   #   #   # ## ## #   #       #     ## ##   #   #   # 
##### # # #   #   ##### #   # #####       ##### #   #   #   ##### 
#     #  ##   #   #  #  ##### #  #            # #####   #   #  #  
##### #   #   #   #   # #   # #   #       ##### #   # ##### #   # 


# P√°gina para o usu√°rio acessar sua conta
@bp.route('/entrar', methods=['GET', 'POST'])
def entrar():

    # Seleciona o formul√°rio de login
    formulario = formularioEntrar()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():

        # Seleciona o usu√°rio com o email informado
        usuario = Usuario.query.filter_by(email=formulario.email.data).first()
        
        # Se um usu√°rio com o email informado existir e a senha (informada no formul√°rio) estiver correta
        if usuario is not None and usuario.verificar_senha(formulario.senha.data):
            
            # A fun√ß√£o login_user() recebe o usu√°rio a ser conectado e um valor Booleano "lembrar-me" opcional
            login_user(usuario, formulario.lembrar_me.data)

            # A vari√°vel 'next' armazena o URL de uma p√°gina protegida, caso o usu√°rio tente acess√°-la sem permiss√£o
            next = request.args.get('next')

            # Se 'next' n√£o estiver dispon√≠vel ou se 'next' n√£o for um URL v√°ido (um URL relativo, neste caso)
            if next is None or not next.startswith('/'):

                # Redirecione o usu√°rio para a p√°gina inicial
                next = url_for('inicio.inicio')
            
            # Sequ√™ncia POST-REDIRECT-GET
            return redirect(next)
        
        # Aviso que ser√° exibido no topo da p√°gina
        flash("Nome de usu√°rio e/ou senha inv√°lido(s). üôÅ", 'alert-danger')
    
    # Se o m√©todo for GET
    return render_template('autorizar/entrar.html', formulario=formulario)


# Rota para o usu√°rio sair da conta
@bp.route('/sair')
@login_required
def sair():

    # A fun√ß√£o logout_user() remove e reinicia a sess√£o de usu√°rio
    logout_user()

    # Aviso que ser√° exibido no topo da p√°gina
    flash('Voc√™ saiu da sua conta. üßê', 'alert-secondary')

    # Redireciona o usu√°rio para a p√°gina inicial
    return redirect(url_for('autorizar.entrar'))


##### #   # ##### ##### ##### ##### #####  ###  ##### 
  #   ##  # #     #     #   #   #   #     ## ## #   # 
  #   # # # ##### #     #####   #   #     #   # #   # 
  #   #  ##     # #     #  #    #   #     ##### #   # 
##### #   # ##### ##### #   # ##### ##### #   # ##### 


# P√°gina que exige que o usu√°rio confirme a conta antes de prosseguir
@bp.route('/naoconfirmado')
def nao_confirmado():

    # Se o usu√°rio atual for an√¥nimo ou j√° estiver confirmado
    if current_user.is_anonymous or current_user.confirmado:

        # Redireciona para o un√≠cio
        return redirect(url_for('inicio.inicio'))

    # Exibe a p√°gina com o aviso para confirma√ß√£o de conta
    return render_template('autorizar/naoconfirmado.html')


# P√°gina para cria√ß√£o de uma nova conta
@bp.route('/inscricao', methods=['GET', 'POST'])
def inscricao():

    # Seleciona o formul√°rio de cria√ß√£o de conta
    formulario = formularioInscricao()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():
        
        # Objeto 'Usuario' criado
        novo_usuario = Usuario(

            email=formulario.email.data,
            nome_usuario=formulario.nome_usuario.data,
            senha=formulario.senha.data
        )

        # O novo usu√°rio √© adicionado ao banco de dados
        db.session.add(novo_usuario)

        # As altera√ß√µes no banco de dados s√£o salvas
        db.session.commit()

        # Gera um token de confirma√ß√£o
        token = novo_usuario.gerar_token_confirmacao()

        # Envia um email de confirma√ß√£o de conta
        enviar_email(
            novo_usuario.email,
            'Confirme Sua Conta',
            'autorizar/email/confirmacao',
            usuario=novo_usuario,
            token=token
        )

        # Aviso que ser√° exibido no topo da p√°gina
        flash("Um email de confirma√ß√£o foi enviado para seu email. üòÑ", 'alert-primary')

        # Sequ√™ncia POST-REDIRECT-GET
        return redirect(url_for('inicio.inicio'))

    # Se o m√©todo for GET
    return render_template('autorizar/inscricao.html', formulario=formulario)


# Rota que confirma uma conta dado um token de confirma√ß√£o
@bp.route('/confirmar/<token>')
@login_required
def confirmar(token):

    # Se o usu√°rio atual j√° estiver confirmado
    if current_user.confirmado:

        # Redirecionar para o in√≠cio
        return redirect(url_for('inicio.inicio'))


    # Se o m√©todo confirmar(token) retornar True
    if current_user.confirmar(token):

        # Salve a altera√ß√£o (confirma√ß√£o da conta) no banco de dados
        db.session.commit()

        # Aviso que ser√° exibido no topo da p√°gina
        flash("Voc√™ confirmou sua conta. Obrigado! üòÑ", 'alert-primary')
    else:

        # Aviso que ser√° exibido no topo da p√°gina
        flash("O link de confirma√ß√£o √© inv√°lido ou j√° expirou. üôÅ", 'alert-danger')

    # Redireciona para a p√°gina inicial
    return redirect(url_for('inicio.inicio'))


# Rota que reenvia o email de confirma√ß√£o de conta
@bp.route('/confirmar')
@login_required
def reenviar_confirmacao():

    # Gera o token de confirma√ß√£o de conta usando o usu√°rio conectado (objeto current_user)
    token = current_user.gerar_token_confirmacao()

    # Envia o email de confirma√ß√£o
    enviar_email(
        current_user.email,
        'Confirme Sua Conta',
        'autorizar/email/confirmacao',
        usuario=current_user,
        token=token
    )
    
    # Aviso que ser√° exibido no topo da p√°gina
    flash("Um novo email de confirma√ß√£o foi enviado para seu endere√ßo de email. üôÇ", 'alert-primary')
    
    # Redireciona para a p√°gina inicial
    return redirect(url_for('inicio.inicio'))


##### ##### ####  ##### ##### ##### #   # ##### ##### 
#   # #     #   # #     #       #   ##  #   #   #   # 
##### ##### #   # ##### #####   #   # # #   #   ##### 
#  #  #     #   # #     #       #   #  ##   #   #  #  
#   # ##### ####  ##### #     ##### #   # ##### #   #


# P√°gina para trocar de senha
@bp.route('/trocar_senha', methods=['GET', 'POST'])
@login_required
def trocar_senha():

    # Seleciona o formul√°rio
    formulario = formularioTrocarSenha()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():

        # Se a senha digitada como 'senha antiga' for a senha do usu√°rio
        if current_user.verificar_senha(formulario.senha_antiga.data):

            # Define a senha do usu√°rio como sendo 'nova senha'
            current_user.senha = formulario.nova_senha.data

            # Adiciona o usu√°rio no banco de dados (para salvar a nova senha)
            db.session.add(current_user)

            # Salva as altera√ß√µes no banco de dados
            db.session.commit()

            # Aviso que ser√° exibido no topo da p√°gina
            flash("Sua senha foi atualizada. üôÇ", 'alert-success')

            # Redireciona para o in√≠cio
            return redirect(url_for('inicio.inicio'))

        else:

            # Aviso que ser√° exibido no topo da p√°gina
            flash("Senha antiga incorreta. üôÅ", 'alert-danger')

    # Se o m√©todo for GET
    return render_template("autorizar/trocar_senha.html", formulario=formulario)

# Rota que redefine (reseta) a senha do usu√°rio caso ele esque√ßa qual √© a senha
@bp.route('/redefinir_senha', methods=['GET, POST'])
@login_required
def redefinir_senha_pedido():

    # Se o usu√°rio estiver logado e tentar acessar rota
    if not current_user.is_anonymous('inicio.inicio'):

        # Redirecione para a rota 'inicio'
        # O usu√°rio conectado √© redirecionado para o in√≠cio por que se ele est√° conectado, presume-se que ele sabe a pr√≥pria senha
        return redirect(url_for('inicio.inicio'))

    # Seleciona o formul√°rio
    formulario = formularioPedirRedefinirSenha()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():

        # Seleciona o usu√°rio cujo email √© igual ao email informado no formul√°rio
        usuario = Usuario.query.filter_by(email=formulario.email.data.lower()).first()
        
        # Se houver um usu√°rio com o email informado
        if usuario:

            # Gera um token para o usu√°rio redefinir sua senha
            token = usuario.gerar_token_redefinir_senha()

            enviar_email(
                usuario.email,
                'Redefina Sua Senha',
                'autorizar/email/redefinir_senha',
                usuario=usuario,
                token=token
            )

        # Aviso que ser√° exibido no topo da p√°gina
        flash("Um email com instru√ß√µes sobre como redefinir sua senha foi enviado para seu email. üôÇ", 'alert-primary')

        return redirect(url_for('autorizar.login'))

    # Se o m√©todo for GET
    return render_template('autorizar/redefinir_senha.html', formulario=formulario)

# P√°gina que recebe o token de redefini√ß√£o de senha
@bp.route('/redefinir_senha/<token>', methods=['GET, POST'])
def redefinir_senha(token):

    # Se o usu√°rio estiver logado e tentar acessar rota
    if not current_user.is_anonymous:

        # Redirecione para a rota 'inicio'
        # O usu√°rio conectado √© redirecionado para o in√≠cio por que se ele est√° conectado, presume-se que ele sabe a pr√≥pria senha
        return redirect(url_for('inicio.inicio'))

    # Seleciona o formul√°rio
    formulario = formularioRedefinirSenha()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():

        # Se o m√©todo redefinir_senha() retornar True (ou seja, se a senha for redefinida)
        if Usuario.redefinir_senha(token, formulario.senha.data):

            # Salve as altera√ß√µes no banco de dados
            db.session.commit()

            # Aviso que ser√° exibido no topo da p√°gina
            flash("Sua senha foi atualizada. üôÇ", 'alert-success')

            # Redirecione o usu√°rio para a rota 'inicio'
            return redirect(url_for('inicio.inicio'))

        # Se o m√©todo n√£o funcionar
        else:

            # Redirecione o usu√°rio para a rota 'inicio'
            return redirect(url_for('inicio.inicio'))

# P√°gina de troca de email
@bp.route('/trocar_email', methods=['GET', 'POST'])
@login_required
def trocar_email_pedido():

    # Seleciona o formul√°rio
    formulario = formularioTrocarEmail()

    # Se o m√©todo for POST
    if formulario.validate_on_submit():

        # Se a senha digitada no formul√°rio for a senha do usu√°rio atual
        if current_user.verificar_senha(formulario.senha.data):

            # Seleciona o novo email digitado 
            novo_email = formulario.email.data.lower()

            # Gera um token serializado contendo o novo email e o id do usu√°rio
            token = current_user.gerar_token_trocar_email(novo_email)

            # Envia o token de confirma√ß√£o para o email do usu√°rio
            enviar_email(
                novo_email,
                'Confirme Seu Endere√ßo de Email',
                'autorizar/email/trocar_email',
                usuario=current_user,
                token=token
            )

            # Aviso que ser√° exibido no topo da p√°gina
            flash("Um email com instru√ß√µes sobre como confirmar seu novo email foi enviado para voc√™. Cheque a caixa de entrada do seu email. üôÇ", 'alert-primary')

            # Redireciona para o in√≠cio
            return redirect(url_for('inicio.inicio'))

        # Se a senha n√£o for a senha do usu√°rio
        else:
            # Aviso que ser√° exibido no topo da p√°gina
            flash("Email e/ou senha inv√°lido(s). Tente novamente. üôÅ", 'alert-danger')
    
    # Se o m√©todo for GET
    return render_template('autorizar/trocar_email.html', formulario=formulario)

# P√°gina que recebe o token de troca de email
@bp.route('/trocar_email/<token>')
@login_required
def trocar_email(token):

    # Se o m√©todo de troca de email (que recebe o token) retornar verdadeiro
    if current_user.trocar_email(token):

        # Salva a altera√ß√£o de email
        db.session.commit()

        # Aviso exibido ap√≥s redirecionamento
        flash("O endere√ßo de email vinculado √† conta foi trocado. üôÇ", 'alert-success')

    # Se o m√©todo retornar falso
    else:

        # Aviso
        flash("A√ß√£o inv√°lida. üßê", 'alert-danger')

    # Redireciona para o in√≠cio
    return redirect(url_for('inicio.inicio'))



