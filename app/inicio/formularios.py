from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, SelectField, BooleanField, SubmitField, RadioField
from wtforms.validators import DataRequired, Length, Email, Regexp
from wtforms import ValidationError
from ..modelos import Usuario, Role, Publicacao, Role


class formularioInscricaoFeuRosa(FlaskForm):

    nome = StringField("Nome e sobrenome",
                       validators=[DataRequired(message='√â necess√°rio informar seu nome e sobrenome'),
                                   Length(0, 40)])
    
    email = StringField("Email",
                        validators=[DataRequired(message='√â necess√°rio informar seu email (que ser√° usado para envio de materiais de estudo).'),
                                    Length(1, 64),
                                    Email(message='Endere√ßo de email inv√°lido. Digite seu email corretamente.')])

    numero_telefone = StringField("N√∫mero de Telefone (WhatsApp)",
                                  validators=[DataRequired(message='√â necess√°rio informar seu n√∫mero de telefone (WhatsApp) para podermos entrar em contato com voc√™.'),
                                              Length(1, 64)])

    opcao_curso = RadioField("Op√ß√£o de Curso (escolha apenas um curso)", choices=[('ingles','Ingl√™s üá∫üá∏'),
                                      ('frances','Franc√™s üá´üá∑'),
                                      ('programacao', 'Programa√ß√£o üíª')])

    horario = RadioField("Hor√°rio do Curso (escolha apenas um hor√°rio)", choices=[('segunda', 'Segunda-Feira, de 20:00 at√© 22:00'), ('ter√ßa', 'Ter√ßa-Feira, de 20:00 at√© 22:00'), ('quarta', 'Quarta-Feira, de 20:00 at√© 22:00'), ('quinta', 'Quinta-Feira, de 20:00 at√© 22:00'), ('domingo1', 'Domingo, de 14:00 at√© 16:00'), ('domingo2', 'Domingo, de 16:30 at√© 18:30')])

    enviar = SubmitField("Se Inscrever")

class formularioEditarPerfil(FlaskForm):

    nome_usuario = StringField("Nome de usu√°rio", validators=[Length(0, 20)])
    nome = StringField("Nome", validators=[Length(0, 64)])
    sobrenome = StringField("Sobrenome", validators=[Length(0, 64)])
    localizacao = StringField("Localiza√ß√£o", validators=[Length(0, 64)])
    sobre = TextAreaField("Sobre mim", validators=[Length(0, 100)])
    enviar = SubmitField("Salvar altera√ß√µes")

class formularioEditarPerfilAdmin(FlaskForm):

    email = StringField("Email",
            validators=[DataRequired(),
                        Length(1, 64),
                        Email()])

    nome_usuario = StringField("Nome de Usu√°rio",
            validators=[DataRequired(),
                        Length(1, 64),
                        Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0,
                        "Seu nome de usu√°rio deve come√ßar com uma letra e s√≥ pode conter letras, n√∫meros, pontos, e o s√≠mbolo tra√ßo baixo (a-z, A-Z, 0-9, '.' e '_').")])

    confirmado = BooleanField("Confirmado")

    # A classe 'SelectField' deve ter as op√ß√µes definidas no atributo 'choices'. Elas devem ser recebidas como sendo uma lista de tuplas, cada uma consistindo de dois valures: um identificador para a op√ß√£o e o texto a ser exibido no item.
    # A lista 'choices' √© definida no construtor do formul√°rio, onde os valores s√£o obtidos a partir do modelo 'Role', atrav√©s de uma consulta que ordena todos os 'roles' alfabeticamente.
    # O identificador de cada tupla √© definido como sendo o id de cada 'role', e por estes serem inteiros, n√≥s usamos o argumento 'coerce=int' para que os valores nas op√ß√µes sejam armazenamos como sendo inteiros, e n√£o strings, que √© o padr√£o.
    role = SelectField("Role", coerce=int)

    nome = StringField("Nome", validators=[Length(0, 64)])

    sobrenome = StringField("Sobrenome", validators=[Length(0, 64)])

    localizacao = StringField("Localiza√ß√£o", validators=[Length(0, 64)])

    sobre = TextAreaField("Sobre", validators=[Length(0, 100)])

    enviar = SubmitField("Salvar altera√ß√µes")

    # Para implementar a l√≥gica de valida√ß√£o do email e do nome de usu√°rio, o construtor do formul√°rio recebe o objeto 'Usuario' como argumento e salva ele em uma vari√°vel, que √© mais tarde usado nos m√©todos de valida√ß√£o personalizados
    def __init__(self, usuario, *args, **kwargs):

        super(formularioEditarPerfilAdmin, self).__init__(*args, **kwargs)
        
        self.role.choices = [(role.id, role.nome)
                              for role in Role.query.order_by(Role.nome).all()]

        self.usuario = usuario

    # Declara ValidationError se o email n√£o puder ser usado
    def validar_email(self, campo):

        # Se o email informado no formul√°rio for diferente do email do usuario da conta sendo alterada e, alem disso, j√° houver uma outra conta vinculada ao email informado no formul√°rio
        if campo.data != self.usuario.email and Usuario.query.filter_by(email=campo.data).first():
            # Indique o ERRO
            raise ValidationError("Email j√° est√° vinculado a uma conta.")

    # Declara ValidationError se o email n√£o puder ser usado
    def validar_nome_usuario(self, campo):

        # Se o nome de usu√°rio informado no formul√°rio for diferente do nome de usu√°rio do usuario da conta sendo alterada e, al√©m disso, j√° houver uma outra conta usando o nome de usu√°rio informado no formul√°rio
        if campo.data != self.usuario.nome_usuario and Usuario.query.filter_by(nome_usuario=campo.data).first():
            # Indique o ERRO
            raise ValidationError("Este nome de usu√°rio j√° est√° sendo usado.")

